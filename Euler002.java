/* -------- SOLVED -------- */

/* Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, 
 * the first 10 terms will be:
 * 
 * 1,2,3,5,8,13,21,34,55,89,...
 * 
 * By considering the terms in the Fibonacci sequence whose values do not exceed N, find the sum of the even-valued 
 * terms. 
 * 
 * Input: T and then N again. 10 <= N <= 4x10^16 */

import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class Euler002 {
	
	/* Fibonacci DP. Hashmap fib stores K,V, where K is term and V is value of K'th term. 
	 * 
	 * Hashmap evenSum stores K,V, where K is term and V is sum of even terms less than K'th term. */
	
	static Map<Long,Long> fib;
	
	/* Generate fibonacci numbers until they exceed n. Return sum of even ones. */
	public static long findSum(long n) {
		long index = 1;
		long num;
		long ans = 0;
		while ((num = generateFib(index)) < n) {
			if (num % 2 == 0) ans += num;
			index++;
		}
		return ans;
	}
	
	/* Generate k'th Fibonacci number with memoization. */
	public static long generateFib(long k) {
		if (k <= 2) return k;
		if (fib.containsKey(k)) return fib.get(k);
		if (fib.containsKey(k-1) && fib.containsKey(k-2)) {
			fib.put(k, fib.get(k-1) + fib.get(k-2));
			return fib.get(k);
		}
		long n1 = generateFib(k-1);
		long n2 = generateFib(k-2);
		fib.put(k-1, n1);
		fib.put(k-2, n2);
		fib.put(k, n1+n2);
		return n1+n2;
	}
	
	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		int nTests = Integer.parseInt(s.nextLine());
		fib = new HashMap<Long,Long>();
		fib.put(1L,1L);
		fib.put(2L,2L);
		for (int i = 0; i < nTests; i++) {
			long n = Long.parseLong(s.nextLine());
			System.out.println(findSum(n));
		}
		s.close();
	}
}
